// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module example_example_Pipeline_SENDING_OUTPUT (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        B_TREADY,
        local_out_buffer_address0,
        local_out_buffer_ce0,
        local_out_buffer_q0,
        zext_ln260,
        tmp_keep_V_reload,
        tmp_strb_V_reload,
        tmp_user_V_reload,
        tmp_id_V_reload,
        tmp_dest_V_reload,
        B_TDATA,
        B_TVALID,
        B_TKEEP,
        B_TSTRB,
        B_TUSER,
        B_TLAST,
        B_TID,
        B_TDEST
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   B_TREADY;
output  [13:0] local_out_buffer_address0;
output   local_out_buffer_ce0;
input  [31:0] local_out_buffer_q0;
input  [31:0] zext_ln260;
input  [3:0] tmp_keep_V_reload;
input  [3:0] tmp_strb_V_reload;
input  [1:0] tmp_user_V_reload;
input  [4:0] tmp_id_V_reload;
input  [5:0] tmp_dest_V_reload;
output  [31:0] B_TDATA;
output   B_TVALID;
output  [3:0] B_TKEEP;
output  [3:0] B_TSTRB;
output  [1:0] B_TUSER;
output  [0:0] B_TLAST;
output  [4:0] B_TID;
output  [5:0] B_TDEST;

reg ap_idle;
reg local_out_buffer_ce0;
reg B_TVALID;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] and_ln270_fu_205_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    B_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln260_cast_fu_151_p1;
reg   [63:0] zext_ln260_cast_reg_247;
wire   [0:0] tmp_last_V_fu_175_p2;
reg   [0:0] tmp_last_V_reg_257;
wire   [63:0] add_ln269_fu_181_p2;
reg   [63:0] add_ln269_reg_262;
reg   [0:0] and_ln270_reg_267;
reg   [63:0] jj_fu_72;
reg   [63:0] ap_sig_allocacmp_jj_1;
wire    ap_loop_init;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln266_fu_164_p2;
wire   [0:0] icmp_ln267_fu_169_p2;
wire   [0:0] or_ln270_fu_187_p2;
wire   [0:0] icmp_ln260_fu_199_p2;
wire   [0:0] xor_ln270_fu_193_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

example_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_exit_ready == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            jj_fu_72 <= 64'd0;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'd1 == and_ln270_reg_267))) begin
            jj_fu_72 <= add_ln269_reg_262;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln269_reg_262 <= add_ln269_fu_181_p2;
        and_ln270_reg_267 <= and_ln270_fu_205_p2;
        tmp_last_V_reg_257 <= tmp_last_V_fu_175_p2;
        zext_ln260_cast_reg_247[31 : 0] <= zext_ln260_cast_fu_151_p1[31 : 0];
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        B_TDATA_blk_n = B_TREADY;
    end else begin
        B_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        B_TVALID = 1'b1;
    end else begin
        B_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'd0 == and_ln270_fu_205_p2) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'd1 == and_ln270_reg_267))) begin
        ap_sig_allocacmp_jj_1 = add_ln269_reg_262;
    end else begin
        ap_sig_allocacmp_jj_1 = jj_fu_72;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        local_out_buffer_ce0 = 1'b1;
    end else begin
        local_out_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign B_TDATA = local_out_buffer_q0;

assign B_TDEST = tmp_dest_V_reload;

assign B_TID = tmp_id_V_reload;

assign B_TKEEP = tmp_keep_V_reload;

assign B_TLAST = tmp_last_V_reg_257;

assign B_TSTRB = tmp_strb_V_reload;

assign B_TUSER = tmp_user_V_reload;

assign add_ln269_fu_181_p2 = (ap_sig_allocacmp_jj_1 + 64'd1);

assign and_ln270_fu_205_p2 = (xor_ln270_fu_193_p2 & icmp_ln260_fu_199_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((1'b0 == B_TREADY) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((1'b0 == B_TREADY) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b0 == B_TREADY) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = (1'b0 == B_TREADY);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign icmp_ln260_fu_199_p2 = (($signed(add_ln269_fu_181_p2) < $signed(64'd900)) ? 1'b1 : 1'b0);

assign icmp_ln266_fu_164_p2 = ((ap_sig_allocacmp_jj_1 == zext_ln260_cast_reg_247) ? 1'b1 : 1'b0);

assign icmp_ln267_fu_169_p2 = ((ap_sig_allocacmp_jj_1 == 64'd899) ? 1'b1 : 1'b0);

assign local_out_buffer_address0 = ap_sig_allocacmp_jj_1;

assign or_ln270_fu_187_p2 = (icmp_ln267_fu_169_p2 | icmp_ln266_fu_164_p2);

assign tmp_last_V_fu_175_p2 = (icmp_ln267_fu_169_p2 | icmp_ln266_fu_164_p2);

assign xor_ln270_fu_193_p2 = (or_ln270_fu_187_p2 ^ 1'd1);

assign zext_ln260_cast_fu_151_p1 = zext_ln260;

always @ (posedge ap_clk) begin
    zext_ln260_cast_reg_247[63:32] <= 32'b00000000000000000000000000000000;
end

endmodule //example_example_Pipeline_SENDING_OUTPUT
