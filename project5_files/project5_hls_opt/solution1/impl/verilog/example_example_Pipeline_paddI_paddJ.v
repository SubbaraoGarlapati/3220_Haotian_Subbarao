// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module example_example_Pipeline_paddI_paddJ (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        local_in_buffer_address0,
        local_in_buffer_ce0,
        local_in_buffer_q0,
        padded_dst_address0,
        padded_dst_ce0,
        padded_dst_we0,
        padded_dst_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] local_in_buffer_address0;
output   local_in_buffer_ce0;
input  [31:0] local_in_buffer_q0;
output  [13:0] padded_dst_address0;
output   padded_dst_ce0;
output   padded_dst_we0;
output  [31:0] padded_dst_d0;

reg ap_idle;
reg local_in_buffer_ce0;
reg padded_dst_ce0;
reg padded_dst_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln107_fu_110_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [6:0] select_ln107_fu_131_p3;
reg   [6:0] select_ln107_reg_246;
reg   [6:0] select_ln107_reg_246_pp0_iter1_reg;
wire   [6:0] select_ln107_2_fu_157_p3;
reg   [6:0] select_ln107_2_reg_256;
wire   [6:0] add_ln111_fu_165_p2;
reg   [6:0] add_ln111_reg_261;
reg   [6:0] add_ln111_reg_261_pp0_iter1_reg;
reg   [6:0] add_ln111_reg_261_pp0_iter2_reg;
wire   [63:0] zext_ln111_fu_192_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln112_fu_199_p1;
reg   [6:0] j_fu_44;
wire    ap_loop_init;
reg   [6:0] ap_sig_allocacmp_j_load;
reg   [6:0] i_fu_48;
wire   [6:0] select_ln107_1_fu_139_p3;
reg   [6:0] ap_sig_allocacmp_i_1;
reg   [13:0] indvar_flatten_fu_52;
wire   [13:0] add_ln107_fu_116_p2;
reg   [13:0] ap_sig_allocacmp_indvar_flatten_load;
wire   [0:0] icmp_ln108_fu_125_p2;
wire   [6:0] indvars_iv_next1412_fu_104_p2;
wire   [6:0] indvars_iv_next1412_mid1_fu_151_p2;
wire   [13:0] grp_fu_203_p3;
wire   [13:0] grp_fu_212_p3;
wire   [6:0] grp_fu_203_p0;
wire   [6:0] grp_fu_203_p1;
wire   [6:0] grp_fu_203_p2;
wire   [6:0] grp_fu_212_p0;
wire   [6:0] grp_fu_212_p1;
wire   [6:0] grp_fu_212_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [13:0] grp_fu_203_p00;
wire   [13:0] grp_fu_203_p20;
wire   [13:0] grp_fu_212_p00;
wire   [13:0] grp_fu_212_p20;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_done_reg = 1'b0;
end

example_mac_muladd_7ns_7ns_7ns_14_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 7 ),
    .din2_WIDTH( 7 ),
    .dout_WIDTH( 14 ))
mac_muladd_7ns_7ns_7ns_14_4_1_U19(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_203_p0),
    .din1(grp_fu_203_p1),
    .din2(grp_fu_203_p2),
    .ce(1'b1),
    .dout(grp_fu_203_p3)
);

example_mac_muladd_7ns_7ns_7ns_14_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 7 ),
    .din2_WIDTH( 7 ),
    .dout_WIDTH( 14 ))
mac_muladd_7ns_7ns_7ns_14_4_1_U20(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_212_p0),
    .din1(grp_fu_212_p1),
    .din2(grp_fu_212_p2),
    .ce(1'b1),
    .dout(grp_fu_212_p3)
);

example_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln107_fu_110_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_48 <= select_ln107_1_fu_139_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_48 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln107_fu_110_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten_fu_52 <= add_ln107_fu_116_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_52 <= 14'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln107_fu_110_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_44 <= add_ln111_fu_165_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_44 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln107_fu_110_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln111_reg_261 <= add_ln111_fu_165_p2;
        select_ln107_2_reg_256 <= select_ln107_2_fu_157_p3;
        select_ln107_reg_246 <= select_ln107_fu_131_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln111_reg_261_pp0_iter1_reg <= add_ln111_reg_261;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        select_ln107_reg_246_pp0_iter1_reg <= select_ln107_reg_246;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln111_reg_261_pp0_iter2_reg <= add_ln111_reg_261_pp0_iter1_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
    end
end

always @ (*) begin
    if (((icmp_ln107_fu_110_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_1 = 7'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_48;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 14'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_52;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_j_load = 7'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_44;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        local_in_buffer_ce0 = 1'b1;
    end else begin
        local_in_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        padded_dst_ce0 = 1'b1;
    end else begin
        padded_dst_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        padded_dst_we0 = 1'b1;
    end else begin
        padded_dst_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln107_fu_116_p2 = (ap_sig_allocacmp_indvar_flatten_load + 14'd1);

assign add_ln111_fu_165_p2 = (select_ln107_fu_131_p3 + 7'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign grp_fu_203_p0 = grp_fu_203_p00;

assign grp_fu_203_p00 = select_ln107_1_fu_139_p3;

assign grp_fu_203_p1 = 14'd100;

assign grp_fu_203_p2 = grp_fu_203_p20;

assign grp_fu_203_p20 = select_ln107_reg_246_pp0_iter1_reg;

assign grp_fu_212_p0 = grp_fu_212_p00;

assign grp_fu_212_p00 = select_ln107_2_reg_256;

assign grp_fu_212_p1 = 14'd102;

assign grp_fu_212_p2 = grp_fu_212_p20;

assign grp_fu_212_p20 = add_ln111_reg_261_pp0_iter2_reg;

assign icmp_ln107_fu_110_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 14'd10000) ? 1'b1 : 1'b0);

assign icmp_ln108_fu_125_p2 = ((ap_sig_allocacmp_j_load == 7'd100) ? 1'b1 : 1'b0);

assign indvars_iv_next1412_fu_104_p2 = (ap_sig_allocacmp_i_1 + 7'd1);

assign indvars_iv_next1412_mid1_fu_151_p2 = (ap_sig_allocacmp_i_1 + 7'd2);

assign local_in_buffer_address0 = zext_ln111_fu_192_p1;

assign padded_dst_address0 = zext_ln112_fu_199_p1;

assign padded_dst_d0 = local_in_buffer_q0;

assign select_ln107_1_fu_139_p3 = ((icmp_ln108_fu_125_p2[0:0] == 1'b1) ? indvars_iv_next1412_fu_104_p2 : ap_sig_allocacmp_i_1);

assign select_ln107_2_fu_157_p3 = ((icmp_ln108_fu_125_p2[0:0] == 1'b1) ? indvars_iv_next1412_mid1_fu_151_p2 : indvars_iv_next1412_fu_104_p2);

assign select_ln107_fu_131_p3 = ((icmp_ln108_fu_125_p2[0:0] == 1'b1) ? 7'd0 : ap_sig_allocacmp_j_load);

assign zext_ln111_fu_192_p1 = grp_fu_203_p3;

assign zext_ln112_fu_199_p1 = grp_fu_212_p3;

endmodule //example_example_Pipeline_paddI_paddJ
