

================================================================
== Vitis HLS Report for 'example_Pipeline_SENDING_OUTPUT'
================================================================
* Date:           Tue Apr 26 03:20:33 2022

* Version:        2021.2 (Build 3367213 on Tue Oct 19 02:48:09 MDT 2021)
* Project:        project5_hls_opt
* Solution:       solution1 (Vivado IP Flow Target)
* Product family: zynq
* Target device:  xc7z020-clg400-1


================================================================
== Performance Estimates
================================================================
+ Timing: 
    * Summary: 
    +--------+----------+----------+------------+
    |  Clock |  Target  | Estimated| Uncertainty|
    +--------+----------+----------+------------+
    |ap_clk  |  10.00 ns|  7.274 ns|     2.70 ns|
    +--------+----------+----------+------------+

+ Latency: 
    * Summary: 
    +---------+---------+----------+----------+-----+-----+---------+
    |  Latency (cycles) |  Latency (absolute) |  Interval | Pipeline|
    |   min   |   max   |    min   |    max   | min | max |   Type  |
    +---------+---------+----------+----------+-----+-----+---------+
    |        ?|        ?|         ?|         ?|    ?|    ?|       no|
    +---------+---------+----------+----------+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +------------------+---------+---------+----------+-----------+-----------+------+----------+
        |                  |  Latency (cycles) | Iteration|  Initiation Interval  | Trip |          |
        |     Loop Name    |   min   |   max   |  Latency |  achieved |   target  | Count| Pipelined|
        +------------------+---------+---------+----------+-----------+-----------+------+----------+
        |- SENDING_OUTPUT  |        ?|        ?|         2|          1|          1|     ?|       yes|
        +------------------+---------+---------+----------+-----------+-----------+------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 0
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 2
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0

+ Individual pipeline summary: 
  * Pipeline-0: initiation interval (II) = 1, depth = 3


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 3
* Pipeline : 1
  Pipeline-0 : II = 1, D = 3, States = { 1 2 3 }
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 2 
2 --> 3 
3 --> 

* FSM state operations: 

State 1 <SV = 0> <Delay = 1.58>
ST_1 : Operation 5 [1/1] (0.00ns)   --->   "%jj = alloca i32 1"   --->   Operation 5 'alloca' 'jj' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 6 [1/1] (0.00ns)   --->   "%tmp_dest_V_reload_read = read i6 @_ssdm_op_Read.ap_auto.i6, i6 %tmp_dest_V_reload"   --->   Operation 6 'read' 'tmp_dest_V_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 7 [1/1] (0.00ns)   --->   "%tmp_id_V_reload_read = read i5 @_ssdm_op_Read.ap_auto.i5, i5 %tmp_id_V_reload"   --->   Operation 7 'read' 'tmp_id_V_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 8 [1/1] (0.00ns)   --->   "%tmp_user_V_reload_read = read i2 @_ssdm_op_Read.ap_auto.i2, i2 %tmp_user_V_reload"   --->   Operation 8 'read' 'tmp_user_V_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 9 [1/1] (0.00ns)   --->   "%tmp_strb_V_reload_read = read i4 @_ssdm_op_Read.ap_auto.i4, i4 %tmp_strb_V_reload"   --->   Operation 9 'read' 'tmp_strb_V_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 10 [1/1] (0.00ns)   --->   "%tmp_keep_V_reload_read = read i4 @_ssdm_op_Read.ap_auto.i4, i4 %tmp_keep_V_reload"   --->   Operation 10 'read' 'tmp_keep_V_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 11 [1/1] (0.00ns)   --->   "%zext_ln260_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %zext_ln260"   --->   Operation 11 'read' 'zext_ln260_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 12 [1/1] (0.00ns)   --->   "%zext_ln260_cast = zext i32 %zext_ln260_read"   --->   Operation 12 'zext' 'zext_ln260_cast' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 13 [1/1] (0.00ns)   --->   "%specinterface_ln0 = specinterface void @_ssdm_op_SpecInterface, i6 %B_V_dest_V, i5 %B_V_id_V, i1 %B_V_last_V, i2 %B_V_user_V, i4 %B_V_strb_V, i4 %B_V_keep_V, i32 %B_V_data_V, void @empty, i32 0, i32 0, void @empty_0, i32 0, i32 0, void @empty_1, void @empty_1, void @empty_1, i32 0, i32 0, i32 0, i32 0, void @empty_1, void @empty_1"   --->   Operation 13 'specinterface' 'specinterface_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 14 [1/1] (1.58ns)   --->   "%store_ln0 = store i64 0, i64 %jj"   --->   Operation 14 'store' 'store_ln0' <Predicate = true> <Delay = 1.58>
ST_1 : Operation 15 [1/1] (0.00ns)   --->   "%br_ln0 = br void"   --->   Operation 15 'br' 'br_ln0' <Predicate = true> <Delay = 0.00>

State 2 <SV = 1> <Delay = 7.27>
ST_2 : Operation 16 [1/1] (0.00ns)   --->   "%jj_1 = load i64 %jj" [hls/example.cpp:269]   --->   Operation 16 'load' 'jj_1' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 17 [1/1] (0.00ns)   --->   "%local_out_buffer_addr_1 = getelementptr i32 %local_out_buffer, i64 0, i64 %jj_1" [hls/example.cpp:263]   --->   Operation 17 'getelementptr' 'local_out_buffer_addr_1' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 18 [2/2] (3.25ns)   --->   "%tmp_data_V = load i14 %local_out_buffer_addr_1" [hls/example.cpp:263]   --->   Operation 18 'load' 'tmp_data_V' <Predicate = true> <Delay = 3.25> <CoreInst = "RAM">   --->   Core 82 'RAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 16000> <RAM>
ST_2 : Operation 19 [1/1] (2.77ns)   --->   "%icmp_ln266 = icmp_eq  i64 %jj_1, i64 %zext_ln260_cast" [hls/example.cpp:266]   --->   Operation 19 'icmp' 'icmp_ln266' <Predicate = true> <Delay = 2.77> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 2.77> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 20 [1/1] (2.77ns)   --->   "%icmp_ln267 = icmp_eq  i64 %jj_1, i64 899" [hls/example.cpp:267]   --->   Operation 20 'icmp' 'icmp_ln267' <Predicate = true> <Delay = 2.77> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 2.77> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 21 [1/1] (0.97ns)   --->   "%tmp_last_V = or i1 %icmp_ln266, i1 %icmp_ln267" [hls/example.cpp:266]   --->   Operation 21 'or' 'tmp_last_V' <Predicate = true> <Delay = 0.97> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 22 [1/1] (3.52ns)   --->   "%add_ln269 = add i64 %jj_1, i64 1" [hls/example.cpp:269]   --->   Operation 22 'add' 'add_ln269' <Predicate = true> <Delay = 3.52> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 3.52> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 23 [1/1] (0.00ns) (grouped into LUT with out node and_ln270)   --->   "%or_ln270 = or i1 %icmp_ln266, i1 %icmp_ln267" [hls/example.cpp:270]   --->   Operation 23 'or' 'or_ln270' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 24 [1/1] (0.00ns) (grouped into LUT with out node and_ln270)   --->   "%xor_ln270 = xor i1 %or_ln270, i1 1" [hls/example.cpp:270]   --->   Operation 24 'xor' 'xor_ln270' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 25 [1/1] (2.77ns)   --->   "%icmp_ln260 = icmp_slt  i64 %add_ln269, i64 900" [hls/example.cpp:260]   --->   Operation 25 'icmp' 'icmp_ln260' <Predicate = true> <Delay = 2.77> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 2.77> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 26 [1/1] (0.97ns) (out node of the LUT)   --->   "%and_ln270 = and i1 %icmp_ln260, i1 %xor_ln270" [hls/example.cpp:270]   --->   Operation 26 'and' 'and_ln270' <Predicate = true> <Delay = 0.97> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 27 [1/1] (0.00ns)   --->   "%br_ln270 = br i1 %and_ln270, void %.loopexit.exitStub, void %._crit_edge" [hls/example.cpp:270]   --->   Operation 27 'br' 'br_ln270' <Predicate = true> <Delay = 0.00>

State 3 <SV = 2> <Delay = 3.25>
ST_3 : Operation 28 [1/1] (0.00ns)   --->   "%specpipeline_ln0 = specpipeline void @_ssdm_op_SpecPipeline, i32 4294967295, i32 0, i32 1, i32 0, void @p_str"   --->   Operation 28 'specpipeline' 'specpipeline_ln0' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 29 [1/1] (0.00ns)   --->   "%specloopname_ln49 = specloopname void @_ssdm_op_SpecLoopName, void @empty_5" [hls/example.cpp:49]   --->   Operation 29 'specloopname' 'specloopname_ln49' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 30 [1/2] (3.25ns)   --->   "%tmp_data_V = load i14 %local_out_buffer_addr_1" [hls/example.cpp:263]   --->   Operation 30 'load' 'tmp_data_V' <Predicate = true> <Delay = 3.25> <CoreInst = "RAM">   --->   Core 82 'RAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 16000> <RAM>
ST_3 : Operation 31 [1/1] (0.00ns)   --->   "%write_ln304 = write void @_ssdm_op_Write.axis.volatile.i32P0A.i4P0A.i4P0A.i2P0A.i1P0A.i5P0A.i6P0A, i32 %B_V_data_V, i4 %B_V_keep_V, i4 %B_V_strb_V, i2 %B_V_user_V, i1 %B_V_last_V, i5 %B_V_id_V, i6 %B_V_dest_V, i32 %tmp_data_V, i4 %tmp_keep_V_reload_read, i4 %tmp_strb_V_reload_read, i2 %tmp_user_V_reload_read, i1 %tmp_last_V, i5 %tmp_id_V_reload_read, i6 %tmp_dest_V_reload_read"   --->   Operation 31 'write' 'write_ln304' <Predicate = true> <Delay = 0.00> <CoreInst = "axis">   --->   Core 115 'axis' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_3 : Operation 32 [1/1] (1.58ns)   --->   "%store_ln270 = store i64 %add_ln269, i64 %jj" [hls/example.cpp:270]   --->   Operation 32 'store' 'store_ln270' <Predicate = (and_ln270)> <Delay = 1.58>
ST_3 : Operation 33 [1/1] (0.00ns)   --->   "%br_ln270 = br void" [hls/example.cpp:270]   --->   Operation 33 'br' 'br_ln270' <Predicate = (and_ln270)> <Delay = 0.00>
ST_3 : Operation 34 [1/1] (0.00ns)   --->   "%ret_ln0 = ret"   --->   Operation 34 'ret' 'ret_ln0' <Predicate = (!and_ln270)> <Delay = 0.00>


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10ns, clock uncertainty: 2.7ns.

 <State 1>: 1.59ns
The critical path consists of the following:
	'alloca' operation ('jj') [15]  (0 ns)
	'store' operation ('store_ln0') of constant 0 on local variable 'jj' [24]  (1.59 ns)

 <State 2>: 7.27ns
The critical path consists of the following:
	'load' operation ('jj', hls/example.cpp:269) on local variable 'jj' [27]  (0 ns)
	'add' operation ('add_ln269', hls/example.cpp:269) [36]  (3.52 ns)
	'icmp' operation ('icmp_ln260', hls/example.cpp:260) [39]  (2.78 ns)
	'and' operation ('and_ln270', hls/example.cpp:270) [40]  (0.978 ns)

 <State 3>: 3.25ns
The critical path consists of the following:
	'load' operation ('tmp.data.V', hls/example.cpp:263) on array 'local_out_buffer' [31]  (3.25 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
