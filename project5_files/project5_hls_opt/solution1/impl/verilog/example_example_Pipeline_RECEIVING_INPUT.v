// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module example_example_Pipeline_RECEIVING_INPUT (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        A_TVALID,
        A_TDATA,
        A_TREADY,
        A_TKEEP,
        A_TSTRB,
        A_TUSER,
        A_TLAST,
        A_TID,
        A_TDEST,
        kernel_address0,
        kernel_ce0,
        kernel_we0,
        kernel_d0,
        local_in_buffer_address0,
        local_in_buffer_ce0,
        local_in_buffer_we0,
        local_in_buffer_d0,
        ii_out,
        ii_out_ap_vld,
        tmp_keep_V_out,
        tmp_keep_V_out_ap_vld,
        tmp_strb_V_out,
        tmp_strb_V_out_ap_vld,
        tmp_user_V_out,
        tmp_user_V_out_ap_vld,
        tmp_id_V_out,
        tmp_id_V_out_ap_vld,
        tmp_dest_V_out,
        tmp_dest_V_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   A_TVALID;
input  [31:0] A_TDATA;
output   A_TREADY;
input  [3:0] A_TKEEP;
input  [3:0] A_TSTRB;
input  [1:0] A_TUSER;
input  [0:0] A_TLAST;
input  [4:0] A_TID;
input  [5:0] A_TDEST;
output  [3:0] kernel_address0;
output   kernel_ce0;
output   kernel_we0;
output  [31:0] kernel_d0;
output  [13:0] local_in_buffer_address0;
output   local_in_buffer_ce0;
output   local_in_buffer_we0;
output  [31:0] local_in_buffer_d0;
output  [31:0] ii_out;
output   ii_out_ap_vld;
output  [3:0] tmp_keep_V_out;
output   tmp_keep_V_out_ap_vld;
output  [3:0] tmp_strb_V_out;
output   tmp_strb_V_out_ap_vld;
output  [1:0] tmp_user_V_out;
output   tmp_user_V_out_ap_vld;
output  [4:0] tmp_id_V_out;
output   tmp_id_V_out_ap_vld;
output  [5:0] tmp_dest_V_out;
output   tmp_dest_V_out_ap_vld;

reg ap_idle;
reg A_TREADY;
reg kernel_ce0;
reg kernel_we0;
reg local_in_buffer_ce0;
reg local_in_buffer_we0;
reg ii_out_ap_vld;
reg tmp_keep_V_out_ap_vld;
reg tmp_strb_V_out_ap_vld;
reg tmp_user_V_out_ap_vld;
reg tmp_id_V_out_ap_vld;
reg tmp_dest_V_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] tmp_last_V_fu_204_p1;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    A_TDATA_blk_n;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln58_fu_218_p2;
wire   [63:0] zext_ln59_fu_239_p1;
reg   [63:0] ii_fu_70;
wire   [63:0] add_ln60_fu_224_p2;
reg    ap_block_pp0_stage0_11001;
wire    ap_loop_init;
reg   [31:0] jj_fu_74;
wire   [31:0] jj_2_fu_233_p2;
reg    ap_block_pp0_stage0_01001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

example_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            ii_fu_70 <= 64'd0;
        end else if (((tmp_last_V_fu_204_p1 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            ii_fu_70 <= add_ln60_fu_224_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            jj_fu_74 <= 32'd0;
        end else if (((icmp_ln58_fu_218_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            jj_fu_74 <= jj_2_fu_233_p2;
        end
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_TDATA_blk_n = A_TVALID;
    end else begin
        A_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_TREADY = 1'b1;
    end else begin
        A_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_last_V_fu_204_p1 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_last_V_fu_204_p1 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ii_out_ap_vld = 1'b1;
    end else begin
        ii_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        kernel_ce0 = 1'b1;
    end else begin
        kernel_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln58_fu_218_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        kernel_we0 = 1'b1;
    end else begin
        kernel_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        local_in_buffer_ce0 = 1'b1;
    end else begin
        local_in_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln58_fu_218_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        local_in_buffer_we0 = 1'b1;
    end else begin
        local_in_buffer_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_last_V_fu_204_p1 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_dest_V_out_ap_vld = 1'b1;
    end else begin
        tmp_dest_V_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_last_V_fu_204_p1 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_id_V_out_ap_vld = 1'b1;
    end else begin
        tmp_id_V_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_last_V_fu_204_p1 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_keep_V_out_ap_vld = 1'b1;
    end else begin
        tmp_keep_V_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_last_V_fu_204_p1 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_strb_V_out_ap_vld = 1'b1;
    end else begin
        tmp_strb_V_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_last_V_fu_204_p1 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_user_V_out_ap_vld = 1'b1;
    end else begin
        tmp_user_V_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln60_fu_224_p2 = (ii_fu_70 + 64'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((1'b0 == A_TVALID) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((1'b0 == A_TVALID) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b0 == A_TVALID) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (1'b0 == A_TVALID);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign icmp_ln58_fu_218_p2 = (($signed(ii_fu_70) > $signed(64'd9999)) ? 1'b1 : 1'b0);

assign ii_out = ii_fu_70[31:0];

assign jj_2_fu_233_p2 = (jj_fu_74 + 32'd1);

assign kernel_address0 = zext_ln59_fu_239_p1;

assign kernel_d0 = A_TDATA;

assign local_in_buffer_address0 = ii_fu_70;

assign local_in_buffer_d0 = A_TDATA;

assign tmp_dest_V_out = A_TDEST;

assign tmp_id_V_out = A_TID;

assign tmp_keep_V_out = A_TKEEP;

assign tmp_last_V_fu_204_p1 = A_TLAST;

assign tmp_strb_V_out = A_TSTRB;

assign tmp_user_V_out = A_TUSER;

assign zext_ln59_fu_239_p1 = jj_fu_74;

endmodule //example_example_Pipeline_RECEIVING_INPUT
